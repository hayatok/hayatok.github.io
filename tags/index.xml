<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tags on hayatok.note.me</title><link>https://hayatok.github.io/tags/</link><description>Recent content in Tags on hayatok.note.me</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright &amp;copy; 2020 - hayatok</copyright><atom:link href="https://hayatok.github.io/tags/index.xml" rel="self" type="application/rss+xml"/><item><title>NLP100本ノック 第1章: 準備運動</title><link>https://hayatok.github.io/posts/nlp100_01/</link><pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate><guid>https://hayatok.github.io/posts/nlp100_01/</guid><description>&lt;p>自然言語処理100本ノック(2020版)に挑戦中。&lt;/p>
&lt;h2 id="00-文字列の逆順">00. 文字列の逆順&lt;/h2>
&lt;blockquote>
&lt;p>文字列”stressed”の文字を逆に（末尾から先頭に向かって）並べた文字列を得よ．&lt;/p>
&lt;/blockquote>
&lt;p>スライシング([start:stop:step])で文字列の逆順(stepを-1に)を取得する。&lt;/p>
&lt;h3 id="コード">コード&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">text &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;stressed&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">print&lt;/span>(text[::&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="実行結果">実行結果&lt;/h3>
&lt;pre>&lt;code>desserts
&lt;/code>&lt;/pre>&lt;h2 id="01-パタトクカシーー">01. 「パタトクカシーー」&lt;/h2>
&lt;blockquote>
&lt;p>「パタトクカシーー」という文字列の1,3,5,7文字目を取り出して連結した文字列を得よ．&lt;/p>
&lt;/blockquote>
&lt;p>00と同様。step=2で、1つ飛ばしで文字を取得する。&lt;/p>
&lt;h3 id="コード-1">コード&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">text &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;パタトクカシーー&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">print&lt;/span>(text[::&lt;span style="color:#ae81ff">2&lt;/span>])
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="実行結果-1">実行結果&lt;/h3>
&lt;pre>&lt;code>パトカー
&lt;/code>&lt;/pre>&lt;h2 id="02-パトカータクシーパタトクカシーー">02. 「パトカー」＋「タクシー」＝「パタトクカシーー」&lt;/h2>
&lt;blockquote>
&lt;p>「パトカー」＋「タクシー」の文字を先頭から交互に連結して文字列「パタトクカシーー」を得よ．&lt;/p>
&lt;/blockquote>
&lt;p>2つの文字列の先頭から1文字ずつ取得して連結する。&lt;/p>
&lt;p>&lt;a href="https://docs.python.org/ja/3/library/functions.html#zip">zip関数&lt;/a>は、複数のイテラブルなオブジェクトから、それらの要素を集めたイテレータを作成する。
(利用例：複数のリストを1つのループで同時に走査する等)&lt;/p>
&lt;h3 id="コード-2">コード&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">text1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;パトカー&amp;#39;&lt;/span>
text2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;タクシー&amp;#39;&lt;/span>
arr &lt;span style="color:#f92672">=&lt;/span> [i &lt;span style="color:#f92672">+&lt;/span> j &lt;span style="color:#66d9ef">for&lt;/span> i, j &lt;span style="color:#f92672">in&lt;/span> zip(text1, text2)]
result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(arr)
&lt;span style="color:#66d9ef">print&lt;/span>(result)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="実行結果-2">実行結果&lt;/h3>
&lt;pre>&lt;code>パタトクカシーー
&lt;/code>&lt;/pre>&lt;h2 id="03-円周率">03. 円周率&lt;/h2>
&lt;blockquote>
&lt;p>“Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.”という文を単語に分解し，各単語の（アルファベットの）文字数を先頭から出現順に並べたリストを作成せよ．&lt;/p>
&lt;/blockquote>
&lt;h3 id="コード-3">コード&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">text &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.&amp;#39;&lt;/span>
cl &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>sub(&lt;span style="color:#e6db74">&amp;#39;[,\.]&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>, text)
result &lt;span style="color:#f92672">=&lt;/span> cl&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
pprint&lt;span style="color:#f92672">.&lt;/span>pprint(result)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="実行結果-3">実行結果&lt;/h3>
&lt;pre>&lt;code>['Now',
'I',
'need',
'a',
'drink',
'alcoholic',
'of',
'course',
'after',
'the',
'heavy',
'lectures',
'involving',
'quantum',
'mechanics']
&lt;/code>&lt;/pre>&lt;h2 id="04-元素記号">04. 元素記号&lt;/h2>
&lt;blockquote>
&lt;p>“Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.”という文を単語に分解し，1, 5, 6, 7, 8, 9, 15, 16, 19番目の単語は先頭の1文字，それ以外の単語は先頭の2文字を取り出し，取り出した文字列から単語の位置（先頭から何番目の単語か）への連想配列（辞書型もしくはマップ型）を作成せよ．&lt;/p>
&lt;/blockquote>
&lt;h3 id="コード-4">コード&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">text &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.&amp;#39;&lt;/span>
arr &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">9&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>, &lt;span style="color:#ae81ff">16&lt;/span>, &lt;span style="color:#ae81ff">19&lt;/span>]
wordm &lt;span style="color:#f92672">=&lt;/span> {}
&lt;span style="color:#66d9ef">for&lt;/span> i, v &lt;span style="color:#f92672">in&lt;/span> enumerate(text&lt;span style="color:#f92672">.&lt;/span>split()):
&lt;span style="color:#66d9ef">if&lt;/span> i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">in&lt;/span> arr:
wordm[v[:&lt;span style="color:#ae81ff">1&lt;/span>]] &lt;span style="color:#f92672">=&lt;/span> i
&lt;span style="color:#66d9ef">else&lt;/span>:
wordm[v[:&lt;span style="color:#ae81ff">2&lt;/span>]] &lt;span style="color:#f92672">=&lt;/span> i
&lt;span style="color:#66d9ef">for&lt;/span> k, v &lt;span style="color:#f92672">in&lt;/span> wordm&lt;span style="color:#f92672">.&lt;/span>items():
&lt;span style="color:#66d9ef">print&lt;/span>(k, v)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="実行結果-4">実行結果&lt;/h3>
&lt;pre>&lt;code>H 0
He 1
Li 2
Be 3
B 4
C 5
N 6
O 7
F 8
Ne 9
Na 10
Mi 11
Al 12
Si 13
P 14
S 15
Cl 16
Ar 17
K 18
Ca 19
&lt;/code>&lt;/pre>&lt;h2 id="05-n-gram">05. n-gram&lt;/h2>
&lt;blockquote>
&lt;p>与えられたシーケンス（文字列やリストなど）からn-gramを作る関数を作成せよ．この関数を用い，”I am an NLPer”という文から単語bi-gram，文字bi-gramを得よ．&lt;/p>
&lt;/blockquote>
&lt;h3 id="コード-5">コード&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">n_gram&lt;/span>(seq, n):
length &lt;span style="color:#f92672">=&lt;/span> len(seq)
n_gram &lt;span style="color:#f92672">=&lt;/span> []
&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(length &lt;span style="color:#f92672">-&lt;/span> n &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>):
n_gram&lt;span style="color:#f92672">.&lt;/span>append(seq[i:i&lt;span style="color:#f92672">+&lt;/span>n])
&lt;span style="color:#66d9ef">return&lt;/span> n_gram
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="実行結果-5">実行結果&lt;/h3>
&lt;pre>&lt;code>['I ', ' a', 'am', 'm ', ' a', 'an', 'n ', ' N', 'NL', 'LP', 'Pe', 'er']
[['I', 'am'], ['am', 'an'], ['an', 'NLPer']]
&lt;/code>&lt;/pre>&lt;h2 id="06-集合">06. 集合&lt;/h2>
&lt;blockquote>
&lt;p>“paraparaparadise”と”paragraph”に含まれる文字bi-gramの集合を，それぞれ, XとYとして求め，XとYの和集合，積集合，差集合を求めよ．さらに，’se’というbi-gramがXおよびYに含まれるかどうかを調べよ．&lt;/p>
&lt;/blockquote>
&lt;h3 id="コード-6">コード&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">X &lt;span style="color:#f92672">=&lt;/span> set(n_gram(&lt;span style="color:#e6db74">&amp;#34;paraparaparadise&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>))
Y &lt;span style="color:#f92672">=&lt;/span> set(n_gram(&lt;span style="color:#e6db74">&amp;#34;paragraph&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>))
&lt;span style="color:#66d9ef">print&lt;/span>(X &lt;span style="color:#f92672">|&lt;/span> Y)
&lt;span style="color:#66d9ef">print&lt;/span>(X &lt;span style="color:#f92672">&amp;amp;&lt;/span> Y)
&lt;span style="color:#66d9ef">print&lt;/span>(X &lt;span style="color:#f92672">-&lt;/span> Y)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="実行結果-6">実行結果&lt;/h3>
&lt;pre>&lt;code>{'se', 'ar', 'ap', 'pa', 'ad', 'ph', 'di', 'ra', 'gr', 'is', 'ag'}
{'ar', 'ap', 'pa', 'ra'}
{'se', 'is', 'di', 'ad'}
&lt;/code>&lt;/pre>&lt;h2 id="07-テンプレートによる文生成">07. テンプレートによる文生成&lt;/h2>
&lt;blockquote>
&lt;p>引数x, y, zを受け取り「x時のyはz」という文字列を返す関数を実装せよ．さらに，x=12, y=”気温”, z=22.4として，実行結果を確認せよ．&lt;/p>
&lt;/blockquote>
&lt;h3 id="コード-7">コード&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">generate_sentense&lt;/span>(x, y, z):
&lt;span style="color:#66d9ef">return&lt;/span> f&lt;span style="color:#e6db74">&amp;#39;{x}時の{y}は{z}&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">print&lt;/span>(generate_sentense(&lt;span style="color:#ae81ff">12&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;気温&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">22.4&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="実行結果-7">実行結果&lt;/h3>
&lt;pre>&lt;code>12時の気温は22.4
&lt;/code>&lt;/pre>&lt;h2 id="08-暗号文">08. 暗号文&lt;/h2>
&lt;blockquote>
&lt;p>与えられた文字列の各文字を，以下の仕様で変換する関数cipherを実装せよ.&lt;br>
英小文字ならば(219 - 文字コード)の文字に置換&lt;br>
その他の文字はそのまま出力&lt;br>
この関数を用い，英語のメッセージを暗号化・復号化せよ&lt;/p>
&lt;/blockquote>
&lt;h3 id="コード-8">コード&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">cipher&lt;/span>(text):
code &lt;span style="color:#f92672">=&lt;/span> [chr(&lt;span style="color:#ae81ff">219&lt;/span> &lt;span style="color:#f92672">-&lt;/span> ord(x)) &lt;span style="color:#66d9ef">if&lt;/span> x&lt;span style="color:#f92672">.&lt;/span>islower() &lt;span style="color:#66d9ef">else&lt;/span> x &lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> text]
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(code)
message &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;I have a pen.&amp;#34;&lt;/span>
message &lt;span style="color:#f92672">=&lt;/span> cipher(message)
&lt;span style="color:#66d9ef">print&lt;/span>(message)
message &lt;span style="color:#f92672">=&lt;/span> cipher(message)
&lt;span style="color:#66d9ef">print&lt;/span>(message)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="実行結果-8">実行結果&lt;/h3>
&lt;pre>&lt;code>I szev z kvm.
I have a pen.
&lt;/code>&lt;/pre>&lt;h2 id="09-typoglycemiapermalink">09. TypoglycemiaPermalink&lt;/h2>
&lt;blockquote>
&lt;p>スペースで区切られた単語列に対して，各単語の先頭と末尾の文字は残し，それ以外の文字の順序をランダムに並び替えるプログラムを作成せよ．ただし，長さが４以下の単語は並び替えないこととする．適当な英語の文（例えば”I couldn’t believe that I could actually understand what I was reading : the phenomenal power of the human mind .”）を与え，その実行結果を確認せよ．&lt;/p>
&lt;/blockquote>
&lt;h3 id="コード-9">コード&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">typoglycemia&lt;/span>(text):
words_modified &lt;span style="color:#f92672">=&lt;/span> []
words &lt;span style="color:#f92672">=&lt;/span> text&lt;span style="color:#f92672">.&lt;/span>split()
&lt;span style="color:#66d9ef">for&lt;/span> word &lt;span style="color:#f92672">in&lt;/span> words:
&lt;span style="color:#66d9ef">if&lt;/span> len(word) &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>:
word &lt;span style="color:#f92672">=&lt;/span> word[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> \
&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(random&lt;span style="color:#f92672">.&lt;/span>sample(word[&lt;span style="color:#ae81ff">1&lt;/span>:&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>], len(word[&lt;span style="color:#ae81ff">1&lt;/span>:&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]))) &lt;span style="color:#f92672">+&lt;/span> word[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
words_modified&lt;span style="color:#f92672">.&lt;/span>append(word)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(words_modified)
text &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;I couldn’t believe that I could actually understand what I was reading : the phenomenal power of the human mind .&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">print&lt;/span>(typoglycemia(text))
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="実行結果-9">実行結果&lt;/h3>
&lt;pre>&lt;code>I coudnl’t beeivle that I could aullcaty utndesnard what I was raendig : the pehoanenml poewr of the human mind .
&lt;/code>&lt;/pre></description></item></channel></rss>